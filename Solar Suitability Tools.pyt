import arcpyimport osfrom sys import argvclass Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Solar Suitability Tools"        self.alias = "solarsuitability"        self.tools = [SolarPanelSuitability]class SolarPanelSuitability(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Solar Panel Suitability"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        workspace_param = arcpy.Parameter(            name="workspace",            displayName = "Workspace",            datatype="DEWorkspace",            parameterType="Required",            direction="Input")                hemisphere_param = arcpy.Parameter(            name="hemisphere",            displayName = "Hemisphere",            datatype="GPString",            parameterType="Required",            direction="Input")                input_param = arcpy.Parameter(            name="input_DEM",            displayName = "Input DEM",            datatype="GPRasterLayer",            parameterType="Required",            direction="Input")        output_param = arcpy.Parameter(            name="output_raster",            displayName = "Output Raster",            datatype="GPRasterLayer",            parameterType="Required",            direction="Output")        workspace_param.defaultEnvironmentName = "workspace"        hemisphere_param.filter.type = "ValueList"        hemisphere_param.filter.list=["Northern Hemisphere (>10° Latitude)", "Near Equator (Within 10° of the Equator)", "Southern Hemisphere (<-10° Latitude)"]        output_param.defaultEnvironmentName = "workspace"        params = [workspace_param, hemisphere_param, input_param, output_param]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        #Define Script Tool Parameters        workspace_param = parameters[0].valueAsText        hemisphere_param = parameters[1].valueAsText        input_param = parameters[2].valueAsText        output_param = parameters[3].valueAsText        def Model(workspace_param, hemisphere_param, input_param, output_param):              arcpy.env.overwriteOutput = True            # Check out any necessary licenses.            arcpy.CheckOutExtension("spatial")            arcpy.CheckOutExtension("3D")            arcpy.CheckOutExtension("ImageAnalyst")            # Process: Area Solar Radiation (Area Solar Radiation) (sa)            Solar_Rad_Whm2 = os.path.join(workspace_param, "Solar_Rad_Whm2")            Area_Solar_Radiation = Solar_Rad_Whm2            Output_direct_radiation_raster = ""            Output_diffuse_radiation_raster = ""            Output_direct_duration_raster = ""            with arcpy.EnvManager(scratchWorkspace=workspace_param, workspace=workspace_param):                Solar_Rad_Whm2 = arcpy.sa.AreaSolarRadiation(in_surface_raster=input_param, latitude=34.50008168143789, sky_size=200,                                                             time_configuration="WholeYear 2021", day_interval=14, hour_interval=2,                                                             each_interval="NOINTERVAL", z_factor=1, slope_aspect_input_type="FROM_DEM",                                                             calculation_directions=8, zenith_divisions=8, azimuth_divisions=8,                                                             diffuse_model_type="UNIFORM_SKY", diffuse_proportion=0.3,                                                             transmittivity=0.5, out_direct_radiation_raster=Output_direct_radiation_raster,                                                             out_diffuse_radiation_raster=Output_diffuse_radiation_raster,                                                             out_direct_duration_raster=Output_direct_duration_raster)                Solar_Rad_Whm2.save(Area_Solar_Radiation)            # Process: Aspect (Aspect) (sa)            AspectRaster = os.path.join(workspace_param, "AspectRaster")            Aspect = AspectRaster            AspectRaster = arcpy.sa.Aspect(in_raster=input_param, method="PLANAR", z_unit="METER", project_geodesic_azimuths="GEODESIC_AZIMUTHS")            AspectRaster.save(Aspect)            # Process: Slope (Slope) (sa)            SlopeRaster = os.path.join(workspace_param, "SlopeRaster")            Slope = SlopeRaster            SlopeRaster = arcpy.sa.Slope(in_raster=input_param, output_measurement="DEGREE", z_factor=1, method="PLANAR", z_unit="METER")            SlopeRaster.save(Slope)            # Process: Slope_Conditonal (Con) (sa)            Solar_Rad_Slope = os.path.join(workspace_param, "Solar_rad_Slope")            Slope_Conditonal = Solar_Rad_Slope            Solar_Rad_Slope = arcpy.sa.Con(in_conditional_raster=SlopeRaster, in_true_raster_or_constant=Solar_Rad_Whm2, in_false_raster_or_constant="", where_clause="VALUE <= 45")            Solar_Rad_Slope.save(Slope_Conditonal)            # Process: Slope_Solar_Conditional (Con) (sa)            Solar_Rad_HighSolar_Slope = os.path.join(workspace_param, "Solar_Rad_HighSolar_Slope")            Slope_Solar_Conditional = Solar_Rad_HighSolar_Slope            Solar_Rad_HighSolar_Slope = arcpy.sa.Con(in_conditional_raster=Solar_Rad_Slope, in_true_raster_or_constant=Solar_Rad_Slope, in_false_raster_or_constant="", where_clause="VALUE >= 800000")            Solar_Rad_HighSolar_Slope.save(Slope_Solar_Conditional)            # Process: LowSlope_Conditional (Con) (sa)            Solar_Rad_Low_Slope = os.path.join(workspace_param, "Solar_Rad_Low_Slope")            LowSlope_Conditional = Solar_Rad_Low_Slope            Solar_Rad_Low_Slope = arcpy.sa.Con(in_conditional_raster=SlopeRaster, in_true_raster_or_constant=Solar_Rad_HighSolar_Slope, in_false_raster_or_constant="", where_clause="VALUE <= 10")            Solar_Rad_Low_Slope.save(LowSlope_Conditional)            # If - Else Hemisphere Conditional            NorthernHem_SolarSuitability = output_param            Northern_Hem_Cond = NorthernHem_SolarSuitability            Equatorial_SolarSuitability = output_param            Equatorial_Cond = Equatorial_SolarSuitability            SouthernHem_SolarSuitability = output_param            Southern_Hem_Cond = SouthernHem_SolarSuitability            if hemisphere_param == "Northern Hemisphere (>10° Latitude)":                NorthernHem_SolarSuitability = arcpy.sa.Con(in_conditional_raster=AspectRaster, in_true_raster_or_constant=Solar_Rad_HighSolar_Slope, in_false_raster_or_constant=Solar_Rad_Low_Slope, where_clause="(VALUE > 67.5 And VALUE < 292.5) or (VALUE = -1)")                NorthernHem_SolarSuitability.save(Northern_Hem_Cond)            elif hemisphere_param == "Near Equator (Within 10° of the Equator)":                Equatorial_SolarSuitability = arcpy.sa.Con(in_conditional_raster = AspectRaster, in_true_raster_or_constant=Solar_Rad_HighSolar_Slope, in_false_raster_or_constant=Solar_Rad_Low_Slope, where_clause="(VALUE >= 0 And VALUE <= 360) or (VALUE = -1)")                Equatorial_SolarSuitability.save(Equatorial_Cond)            else:                SouthernHem_SolarSuitability = arcpy.sa.Con(in_conditional_raster=AspectRaster, in_true_raster_or_constant=Solar_Rad_HighSolar_Slope, in_false_raster_or_constant=Solar_Rad_Low_Slope, where_clause="(VALUE < 112.5 or VALUE > 247.5) or (VALUE = -1)")                SouthernHem_SolarSuitability.save(Southern_Hem_Cond)        if __name__ == '__main__':            # Global Environment settings            with arcpy.EnvManager(scratchWorkspace=workspace_param, workspace=workspace_param):                Model(workspace_param, hemisphere_param, input_param, output_param)        return